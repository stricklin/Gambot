Gambot: the minichess player
Rubin Stricklin
Gambot is written in python2, after being written
in python3 and being too slow and after I almost
completed Gambot in Java. The reason that it
performs so much better in python2 is because
I can compile it with pypy.

After I got my move generator working, I made a
game driver along with random and human players
so that I could better interact with Gambot. It
was harder that I thought it would be to win
against a random player.

Then I made a material evaluation function which is
pretty naieve. I plan on doing more tuning of piece
values and adding a pawn stucture evaluation to it.
But that was enough to get started on Negamax.

Gambot is able to do alphabeta pruned negamax
search at depth 4 on my laptop with pypy and
5 on babbage without it. I am considering
finishing Gambot_Mk2 (java edition) because
of this poor performance. Also, the networking
example that you provided in java is amazingly
better than the one I wrote in python. It might
be worth switching just for that.



My win as white with AB depth 5
accept 15126
105 W 5:00 5:00 game starts

1 W
kqbnr
ppppp
.....
.....
PPPPP
RNBQK

? 05:00.000 05:00.000
b2-b3
! b5-b4

2 W
kqbnr
p.ppp
.p...
.P...
P.PPP
RNBQK

? 05:00.000 04:59.999
a2-a3
! b4-a3

3 W
kqbnr
p.ppp
.....
pP...
..PPP
RNBQK

? 04:59.251 04:59.957
e2-e3
! a6-b5

4 W
.qbnr
pkppp
.....
pP..P
..PP.
RNBQK

? 04:57.882 04:59.915
a1-a2
! d6-e4

5 W
.qb.r
pkppp
....n
pP..P
R.PP.
.NBQK

? 04:56.041 04:59.873
d1-e2
! b5-b4

6 W
.qb.r
p.ppp
.k..n
pP..P
R.PPQ
.NB.K

? 04:54.471 04:59.831
b1-c3
! e4-c3

7 W
.qb.r
p.ppp
.k...
pPn.P
R.PPQ
..B.K

? 04:49.261 04:59.789
c1-a3
! b4-a3

8 W
.qb.r
p.ppp
.....
kPn.P
R.PPQ
....K

? 04:40.342 04:59.748
a2-a3
= W wins
231 W wins

White games are alot easier than black ones, I feel like 
